on:
  push:
    branches:
      - staging
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - staging
  workflow_dispatch:
    inputs:
      ref:
        description: 'Branch or tag to build from (e.g., main, staging, v1.0.0)'
        required: false
        type: string

        default: ${{ github.ref }}

env:
  # GitHub token for creating releases
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Apple Developer credentials for macOS code signing
  APPLE_ID: ${{ secrets.APPLE_ID }}
  APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
  APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
  # Windows code signing certificate
  CSC_LINK: ${{ secrets.CSC_LINK }}
  CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
  # macOS code signing certificate
  CSC_LINK_MAC: ${{ secrets.CSC_LINK_MAC }}
  CSC_KEY_PASSWORD_MAC: ${{ secrets.CSC_KEY_PASSWORD_MAC }}

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win32
            arch: x64
            npm_config_cache: ~/.npm
          - os: windows-latest
            platform: win32
            arch: ia32
            npm_config_cache: ~/.npm
          - os: windows-latest
            platform: win32
            arch: arm64
            npm_config_cache: ~/.npm
          - os: macos-latest
            platform: darwin
            arch: x64
            npm_config_cache: ~/.npm
          - os: macos-latest
            platform: darwin
            arch: arm64
            npm_config_cache: ~/.npm
          - os: ubuntu-latest
            platform: linux
            arch: x64
            npm_config_cache: ~/.npm
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            npm_config_cache: ~/.npm

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install Snapcraft (Linux only)
        if: matrix.platform == 'linux'
        uses: samuelmeuli/action-snapcraft@v2

      - name: Setup Python (for node-gyp)
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install native dependencies (Windows)
        if: matrix.platform == 'win32'
        run: |
          npm install --global windows-build-tools
          npm config set msvs_version 2019

      - name: Import Apple Developer Certificate (macOS)
        if: matrix.platform == 'darwin' && env.CSC_LINK_MAC != ''
        run: |
          echo $CSC_LINK_MAC | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P $CSC_KEY_PASSWORD_MAC -T /usr/bin/codesign
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          rm certificate.p12

      - name: Import Windows Code Signing Certificate
        if: matrix.platform == 'win32' && env.CSC_LINK != ''
        run: |
          echo "${{ secrets.CSC_LINK }}" | base64 --decode > certificate.p12
          echo "CSC_LINK=${{ github.workspace }}/certificate.p12" >> $GITHUB_ENV
        shell: bash

      - name: Build Electron app
        run: npm run build
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          ELECTRON_BUILDER_CACHE: .cache/electron-builder
          USE_HARD_LINKS: false

      - name: Build and package for ${{ matrix.platform }}-${{ matrix.arch }}
        run: npm run dist -- --${{ matrix.platform }} --${{ matrix.arch }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          ELECTRON_BUILDER_CACHE: .cache/electron-builder
          USE_HARD_LINKS: false

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-artifacts
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.pkg
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.snap
            dist/*.tar.gz
            dist/*.zip
            dist/latest*.yml
          retention-days: 5

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -type f \( -name "*.exe" -o -name "*.dmg" -o -name "*.pkg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.snap" -o -name "*.tar.gz" -o -name "*.zip" -o -name "latest*.yml" \) -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Get version from tag or input
        id: get_version
        run: |
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract changelog for this version
            awk '/^## \[${{ steps.get_version.outputs.version }}\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > current_changelog.md
            if [ -s current_changelog.md ]; then
              echo "changelog_file=current_changelog.md" >> $GITHUB_OUTPUT
            else
              echo "No changelog found for version ${{ steps.get_version.outputs.version }}"
              echo "changelog_file=" >> $GITHUB_OUTPUT
            fi
          else
            echo "No CHANGELOG.md file found"
            echo "changelog_file=" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body_path: ${{ steps.changelog.outputs.changelog_file }}
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, 'alpha') || contains(steps.get_version.outputs.version, 'beta') || contains(steps.get_version.outputs.version, 'rc') }}

      - name: Upload Release Assets
        run: |
          for file in release-assets/*; do
            if [ -f "$file" ]; then
              echo "Uploading $file"
              gh release upload ${{ steps.get_version.outputs.version }} "$file" --clobber
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest release (if not prerelease)
        if: ${{ !contains(steps.get_version.outputs.version, 'alpha') && !contains(steps.get_version.outputs.version, 'beta') && !contains(steps.get_version.outputs.version, 'rc') }}
        run: |
          gh release edit ${{ steps.get_version.outputs.version }} --latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: [build, release]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify success
        if: needs.release.result == 'success'
        run: |
          echo "‚úÖ Release ${{ needs.release.outputs.version || github.ref_name }} created successfully!"
          echo "üéâ All platform builds completed and assets uploaded."

      - name: Notify failure
        if: needs.build.result == 'failure' || needs.release.result == 'failure'
        run: |
          echo "‚ùå Release workflow failed!"
          echo "Please check the logs for more details."
          exit 1
